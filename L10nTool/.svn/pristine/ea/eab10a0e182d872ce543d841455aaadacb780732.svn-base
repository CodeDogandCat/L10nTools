package us.zoom.tools.l10n.core;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import us.zoom.tools.l10n.android.Android;
import us.zoom.tools.l10n.windows.Windows;

public class Index {

	public static void init_android(Map<String, String> commandMap) {
		Android appTool = new Android();
		String function = commandMap.get(Command.FUNCTION);

		switch (function) {
		case "checker":
			if (check(0, commandMap)) {
				System.err.println("start");
				appTool.checkerProcess(commandMap);
				System.err.println("end");
			}

			break;
		case "merger":
			if (check(1, commandMap)) {

				System.err.println("start");
				appTool.mergerProcess(commandMap);
				System.err.println("end");
			}
			break;
		case "history-compare":
			if (check(2, commandMap)) {

				System.err.println("start");
				appTool.historyCompareProcess(commandMap);
				System.err.println("end");
			}
			break;

		default:
			System.err.println("not defined function");
		}
	}

	public static boolean check(int type, Map<String, String> commandMap) {
		if (type == 0) {
			if (commandMap.containsKey(Command.DEFAULT_LANGUAGE_RESOURCE_FILE) && commandMap.containsKey(Command.COMPARED_LANGUAGE_RESOURCE_FILE)) {
				return true;
			}
		} else if (type == 1) {
			if (commandMap.containsKey(Command.DEFAULT_LANGUAGE_RESOURCE_FILE) && commandMap.containsKey(Command.COMPARED_LANGUAGE_RESOURCE_FILE) && commandMap.containsKey(Command.NEW_TRANSLATIONS_RESOURCE_FILE)) {
				return true;
			}
		} else if (type == 2) {
			if (commandMap.containsKey(Command.DEFAULT_LANGUAGE_RESOURCE_FILE) && commandMap.containsKey(Command.SVN_REVISION_OF_HISTORY_RESOURCE_FILE) && commandMap.containsKey(Command.RESOURCE_SVN_PATH)) {
				return true;
			}
		}

		help();
		return false;

	}

	public static void init_windows(Map<String, String> commandMap) {
		Windows appTool = new Windows();

		String function = commandMap.get(Command.FUNCTION);

		switch (function) {
		case "checker":
			System.err.println("start");

			appTool.checkerProcess(commandMap);
			System.err.println("end");
			break;
		case "merger":
			System.err.println("start");
			appTool.mergerProcess(commandMap);
			System.err.println("end");
			break;
		case "history-compare":
			System.err.println("start");
			appTool.historyCompareProcess(commandMap);
			System.err.println("end");
			break;

		default:
			System.err.println("not defined function");
		}
	}

	public static void init_mac(Map<String, String> commandMap) {

	}

	public static void init_ios(Map<String, String> commandMap) {

	}

	public static void help() {
		System.err.println("ERROR");
		System.err.println("HELP:");
		System.err.println("l10n-tool.bat ");
		System.err.println("-p <platform> ");
		System.err.println("-f <function> ");
		System.err.println("-dr <default language resource file> ");
		System.err.println("-cr <compared language resource file> ");
		System.err.println("-nr <new translations resource file> ");
		System.err.println("-svnuser <svn user> ");
		System.err.println("-svnpass <svn password> ");
		System.err.println("-svnpath <resource svn path> ");
		System.err.println("-revision <svn revision of history resource file>");
		System.err.println("-o <out file>");
	}

	public static void main(String[] args) {
		String[] temp = args[0].trim().split("#");
		ArrayList<String> commandList = new ArrayList<String>();
		for (String string : temp) {
			if (!string.equals("")) {

				commandList.add(string);
			}
		}

		if (commandList.size() % 2 != 0) {
			help();
		} else {
			Map<String, String> commandMap = new HashMap<String, String>();
			for (int i = 0; true;) {
				commandMap.put(commandList.get(i), commandList.get(i + 1));
				i += 2;
				if (i >= commandList.size()) {
					break;
				}
			}
			String paltform = commandMap.get(Command.PLATFORM);
			switch (paltform) {
			case "android":
				init_android(commandMap);
				break;
			case "windows":
				init_windows(commandMap);
				break;
			case "mac":
				init_mac(commandMap);
				break;
			case "ios":
				init_ios(commandMap);
				break;

			default:
				System.err.println("not defined platform");
			}
		}

	}
}
