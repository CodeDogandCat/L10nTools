import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.HashMap;
import java.util.Map;
import java.util.Stack;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Checker {
	public static BufferedReader reader = null;
	public static OutputStreamWriter osw = null;
	public static Stack<String> tagBracketStack = new Stack<String>();
	public static StringBuffer tagBuffer = new StringBuffer();
	public static boolean run = true;
	public static int length;

	public static Character getChar() {
		try {
			int temp = reader.read();
			if (temp == -1) {
				run = false;
				return null;
			} else {
				return Character.valueOf((char) temp);
			}

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
	}

	public static void readHead() {
		try {
			reader.readLine();
			reader.readLine();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public static String readBlank() {

		String c = "#$%";
		try {
			// reader.mark(length);
			while ((c = reader.readLine()) != null && run) {

				if (c.trim().equals("")) {
					// System.err.println("--------------readBlank()-------blank");
					return "\n";
				} else {
					// this line not a blank line
					// reader.reset();// reset to last line

					// System.err.println("--------------readBlank()-------notblank");
					return "notblankline";

				}
			}
			return null;
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			return null;
		}

	}

	/**
	 * try to read a comment <!-- Parameters: joinMeetingUrl, meetingId -->
	 */
	public static String readComment() {
		Character c;
		// <string name="zm_msg_conffail_internal_only_sign">Please sign in
		// with your company account to join.</string>
		// while (true) {
		// remark , be used to reset
		// reader.mark(length);
		while ((c = getChar()) != null && run) {
			if (c == '<') {
				break;
			}
		}
		// System.err.println("jump--" + c);
		if (c == null) {
			return null;
		}
		// <!--
		StringBuffer commentbBuffer = new StringBuffer();
		// go until be sure it isn't a comment
		c = getChar();

		if (c == '!') {

			c = getChar();
			if (c == '-') {

				c = getChar();

				if (c == '-') {
					// System.err.println("------it is a comment");
					commentbBuffer.append("<!--");
					while (true) {// just go until the --> then
									// return

						// -->
						if ((c = getChar()) != null && run) {
							commentbBuffer.append(c);
							if (c == '-') {
								if ((c = getChar()) != null && run) {
									commentbBuffer.append(c);
									if (c == '-') {
										if ((c = getChar()) != null && run) {
											commentbBuffer.append(c);
											if (c == '>') {
												String commentContent = commentbBuffer.toString();
												// System.out.println("-----------readComment()"
												// + commentContent);
												commentbBuffer.setLength(0);// clean
																			// the
																			// buffer
												return commentContent;
											}
										}
									}
								}
							}

						}

					}
				}
			}
		} else {// reset,because be sure this is not a comment
			// System.err.println("notcomment");
			// reader.reset();
			return "notcomment";
		}
		return null;

	}

	/**
	 * try to read a tag
	 */
	public static String readTag() {
		Character c;
		// </ and />
		// reader.mark(length);
		c = getChar();
		while (c != null && run) {
			if (c == '<') {
				if ((c = getChar()) != '!') {// it is a tag
					tagBuffer.append("<" + c);
					if (c != '/') {

						tagBracketStack.push("<");

					} else {// it's </,but the tag isn't completed

						if (!tagBracketStack.isEmpty()) {
							tagBracketStack.pop();
						} else {

							return null;
						}
						// read until the end of the tag
						while ((c = getChar()) != '>' && run) {
							tagBuffer.append(c);
						}
						tagBuffer.append(c);// add >

					}
				} else {
					// maybe it is also a tag
					// but
					// <string
					// name="zm_lbl_forget_password_link"><![CDATA[<a
					// href="%s">Forgot password?</a>]]></string>

					// ## alter##
					// <plurals name="zm_msg_invitations_sent">
					// <!-- <item quantity="one">1个邀请已发出</item> -->
					// <item quantity="other">%d个邀请已经发出</item>
					// </plurals>
					tagBuffer.append("<" + c);
					if (tagBracketStack.isEmpty()) {

						if ((c = getChar()) != null && run) {
							tagBuffer.append(c);
							if (c == '-') {
								if ((c = getChar()) != null && run) {
									tagBuffer.append(c);
									if (c == '-') {
										// be sure it is not a tag, it is a
										// comment
										// reader.reset();
										return "nottag";
									}
								}
							}
						}
					}

				}

			} else if (c == '/') {// maybe />
				tagBuffer.append(c);

				if ((c = getChar()) == '>') {
					// it's /> ,and the tag is completed
					tagBuffer.append(c);

					if (!tagBracketStack.isEmpty()) {
						tagBracketStack.pop();
					} else {
						return null;
					}

				}
			} else {// it isn't start or end mark

				tagBuffer.append(c);
			}

			if (tagBracketStack.isEmpty()) {
				String tagContent = tagBuffer.toString();
				tagBuffer.setLength(0);
				// System.out.println(tagContent);
				return tagContent;
			} else {
				c = getChar();// read next char
			}

		}
		return null;

	}

	/**
	 * read
	 */
	public static String[] read() {
		String result = null;
		String[] returnArray = { "zoom", "android" };
		try {
			if (run) {
				reader.mark(length);
				if ((result = readBlank()) == null) {
					return null;
				} else {
					if (result.equals("notblankline")) {
						reader.reset();
						reader.mark(length);
						if ((result = readComment()) == null) {
							return null;
						} else if (result.equals("notcomment")) {
							reader.reset();
							reader.mark(length);
							if (run) {
								if ((result = readTag()) == null) {

									return null;
								} else if (result.equals("nottag")) {
									reader.reset();
									returnArray[0] = "tag";
									returnArray[1] = result;
									return returnArray;

								} else {
									returnArray[0] = "tag";
									returnArray[1] = result;
									return returnArray;
								}
							}
						} else {
							returnArray[0] = "comment";
							returnArray[1] = result;
							return returnArray;
						}
					} else {
						returnArray[0] = "blank";
						returnArray[1] = result;
						return returnArray;
					}

				}

			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;

	}

	/**
	 * read tags into map
	 */
	@SuppressWarnings("finally")
	public static Map<String, String> readFileByTags(String fileName) {

		File file = new File(fileName);
		length = (int) file.length();
		// BufferedReader reader = null;
		Map<String, String> tag_Map = new HashMap<String, String>();
		try {

			InputStreamReader isr = new InputStreamReader(new FileInputStream(file), "UTF-8");
			reader = new BufferedReader(isr);
			// jump <?xml <resources>
			readHead();

			String tempString = null;
			String[] returnArray = { "", "" };
			int i = 1;

			// System.err.println("---------run  " + run);
			while ((returnArray = read()) != null && run) {
				// System.err.println(i++ + "------");
				// System.err.println(returnArray[0] + "------" +
				// returnArray[1]);
				if (returnArray[0].equals("tag")) {
					if (!returnArray[1].equals("nottag")) {
						tempString = returnArray[1];
						// System.err.println(tempString);
						// eg
						// <string name="zm_msg_no_zoom_rooms">No Rooms
						// yet</string>
						// operation
						String regEx = "<string.*?name=\\\"(.*?)\\\">.*?</string>";
						Pattern pattern = Pattern.compile(regEx);
						Matcher matcher = pattern.matcher(tempString);
						if (matcher.find()) {
							tag_Map.put(matcher.group(1), "\t" + tempString.trim());
						} else {

							// eg
							// <plurals name="zm_lbl_folder_items">
							// <item quantity="one">1 Item</item>
							// <item quantity="other">%d Items</item>
							// </plurals>
							// operation
							regEx = "<plurals.*?name=\\\"(.*?)\\\">";
							pattern = Pattern.compile(regEx);
							matcher = pattern.matcher(tempString);
							if (matcher.find()) {

								tag_Map.put(matcher.group(1), "\t" + tempString.trim());
							}
						}
						// System.err.println("get a tag");
					}

				} else if (returnArray[0].equals("comment")) {

					// System.err.println("get a comment");

				} else if (returnArray[0].equals("blank")) {
					// System.err.println("get a blank line");
					// tempString = returnArray[1];
				}

			}
			reader.close();
		} catch (IOException e) {
			// e.printStackTrace();
			System.err.println("read xml file error , maybe path error");
		} finally {
			// reset
			run = true;
			tagBracketStack.clear();
			tagBuffer.setLength(0);
			if (reader != null) {
				try {
					reader.close();
				} catch (IOException e1) {
					System.err.println("close BufferedReader error");
				}

			}
			return tag_Map;
		}
	}

	public static void printHead() {

	}

	public static void compare(String path_en, String path_zh, String path_output) {

		try {
			FileOutputStream fos;
			fos = new FileOutputStream(path_output);
			osw = new OutputStreamWriter(fos, "utf-8");

			// read xml file to arraylist
			Map<String, String> tag_enMap = new HashMap<String, String>();
			tag_enMap = readFileByTags(path_en);
			// System.err.println("tag_enMap size:" + tag_enMap.size());

			Map<String, String> tag_zhMap = new HashMap<String, String>();
			tag_zhMap = readFileByTags(path_zh);
			// System.err.println("tag_zhMap size:" + tag_zhMap.size());

			if (tag_enMap.size() != 0 && tag_zhMap.size() != 0) {
				// loop through tag_enMap , if tag_zhMap doesn't
				// contains
				// the item ,then add into the misslist
				Map<String, String> tag_missMap = new HashMap<String, String>();
				for (Map.Entry<String, String> entry : tag_enMap.entrySet()) {

					if (!tag_zhMap.containsKey(entry.getKey())) {
						tag_missMap.put(entry.getKey(), entry.getValue());
					}
				}

				// loop through tag_zhMap , if tag_enMap doesn't
				// contains
				// the item ,then add into the extralist
				Map<String, String> tag_extraMap = new HashMap<String, String>();

				for (Map.Entry<String, String> entry : tag_zhMap.entrySet()) {

					if (!tag_enMap.containsKey(entry.getKey())) {
						tag_extraMap.put(entry.getKey(), entry.getValue());
					}
				}
				osw.write("#################################################################################" + "\n");
				osw.write("###############" + "\n");
				osw.write("###############         checking result for " + path_zh + "\n");
				osw.write("###############" + "\n");
				osw.write("#################################################################################" + "\n");
				if (tag_missMap.isEmpty() && tag_extraMap.isEmpty()) {
					osw.write("                        perfect                      " + "\n");
				}
				if (!tag_missMap.isEmpty()) {
					// print missingList

					osw.write("                         miss  " + tag_missMap.size() + " item(s)" + "\n");
					osw.write("\n\n");
					for (Map.Entry<String, String> entry : tag_missMap.entrySet()) {
						osw.write(entry.getValue() + "\n");
					}

				}
				if (!tag_extraMap.isEmpty()) {
					// print extraList
					osw.write("\n\n");

					osw.write("                         extra  " + tag_extraMap.size() + " item(s)" + "\n");
					osw.write("\n\n");
					for (Map.Entry<String, String> entry : tag_extraMap.entrySet()) {
						osw.write(entry.getValue() + "\n");
					}
				}
				osw.write("\n\n");
				osw.flush();

			} else {
				System.out.println("get XMLinfo failed");
			}
			osw.close();
		} catch (Exception e) {
			System.out.println("result output failed ");
		}

	}

	public static void printTail() {

	}

	public static void main(String[] args) {

		String path_output = "src/result.txt";
		String path_en = "src/strings.xml";
		String path_zh = "src/strings2.xml";
		String path_temp = "src/temp.xml";
		/**
		 * if you run the directly run read() more then onte time ,you must
		 * reset belows property first run = true; tagBracketStack.clear();
		 * tagBuffer.setLength(0); if you just run readFileByTags() , don't need
		 * to reset
		 * 
		 */
		// compare(path_en, path_zh, path_output);
		compare(args[0], args[1], args[2]);
		System.out.println("**START**");

		// try {
		// File file = new File(path_zh);
		// length = (int) file.length();
		// InputStreamReader isr;
		// isr = new InputStreamReader(new FileInputStream(file), "UTF-8");
		// reader = new BufferedReader(isr);
		//
		// FileOutputStream fos;
		// fos = new FileOutputStream(path_temp);
		// OutputStreamWriter osw = new OutputStreamWriter(fos, "utf-8");
		//
		// String tempString = null;
		//
		// // read line by line ,until the end of the file
		// int i = 1;
		// System.out.println("Start");
		// reader.readLine();// jump <?xml
		// reader.readLine();// jump <resources>
		//
		// // while ((tempString = read()) != null && run) {
		// // System.out.println(i + " :" + tempString);
		// // // System.out.println(i + "------" + run);
		// // i++;
		// // }
		// while ((tempString = read()) != null && run) {
		// if (!(tempString.equals("comment"))) {
		// System.out.println(i + tempString);
		// osw.write(tempString + "\n");
		// }
		// // System.out.println(i + "------");
		// i++;
		// }
		// osw.flush();
		// osw.close();
		// System.out.println("Done");
		//
		// } catch (UnsupportedEncodingException | FileNotFoundException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// } catch (IOException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// }
		// Map<String, String> result2Map = readFileByTags(path_en);
		// for (Map.Entry<String, String> entry : result2Map.entrySet()) {
		// System.out.println(entry.getKey() + "--" + entry.getValue());
		// }
		//
		// System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
		//
		// Map<String, String> resultMap = readFileByTags(path_zh);
		// for (Map.Entry<String, String> entry : resultMap.entrySet()) {
		// System.out.println(entry.getKey() + "--" + entry.getValue());
		// }
	}
}
